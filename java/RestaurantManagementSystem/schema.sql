-- schema.sql

-- Table for menu items
CREATE TABLE menu_items (
    item_name VARCHAR2(100) PRIMARY KEY,
    price VARCHAR2(10) NOT NULL
);

-- Table for customer orders
CREATE TABLE customer_orders (
    order_id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY, -- Auto-incrementing ID
    customer_name VARCHAR2(100) NOT NULL,
    order_details CLOB, -- Use CLOB for potentially long order strings
    bill_amount NUMBER(10, 2) DEFAULT 0,
    is_paid NUMBER(1) DEFAULT 0, -- 0 for false, 1 for true
    reserved_table NUMBER(2) -- Store table number if reserved
);

-- Table for table availability
CREATE TABLE table_status (
    table_number NUMBER(2) PRIMARY KEY,
    is_available NUMBER(1) DEFAULT 1 -- 0 for false (reserved), 1 for true (available)
);

-- Optional: Initial data for menu (you can also add these via your app)
INSERT INTO menu_items (item_name, price) VALUES ('rice', '30');
INSERT INTO menu_items (item_name, price) VALUES ('roti', '20');
INSERT INTO menu_items (item_name, price) VALUES ('chicken', '100');
INSERT INTO menu_items (item_name, price) VALUES ('biryani', '99');
INSERT INTO menu_items (item_name, price) VALUES ('desserts', '60');

COMMIT;

-- Optional: Initial data for tables (your app's initializeTables will handle this too)
-- INSERT INTO table_status (table_number, is_available) VALUES (1, 1);
-- INSERT INTO table_status (table_number, is_available) VALUES (2, 1);
-- INSERT INTO table_status (table_number, is_available) VALUES (3, 1);
-- INSERT INTO table_status (table_number, is_available) VALUES (4, 1);
-- INSERT INTO table_status (table_number, is_available) VALUES (5, 1);
-- COMMIT;
